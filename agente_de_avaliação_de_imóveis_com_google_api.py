# -*- coding: utf-8 -*-
"""Agente de Avalia√ß√£o de Im√≥veis com Google API

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Us9zhYDkJjVjYnYByPRGx_APy5PEpgYR
"""

# Commented out IPython magic to ensure Python compatibility.
%pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Commented out IPython magic to ensure Python compatibility.
# Instalar Framework ADK de agentes do Google ################################################
%pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Laudos Periciais --- #
##########################################
def agente_buscador(topico, data_de_hoje):
    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um Assistente de Pesquisa T√©cnica e Desenvolvedor de Laudos Periciais na √°rea de Engenharia Civil.
        Sua tarefa √© utilizar mecanismos de busca (como o Google Search) para localizar decis√µes recentes do Tribunal de Justi√ßa que envolvam laudos periciais aprovados ou rejeitados relacionados ao tema indicado.
        Priorize at√© 5 exemplos relevantes de cada tipo (laudos aceitos e laudos rejeitados), com base na quantidade e qualidade das informa√ß√µes dispon√≠veis sobre cada caso.
        Desconsidere laudos com pouca repercuss√£o ou escassa fundamenta√ß√£o t√©cnica/jur√≠dica publicada, mesmo que tenham sido mencionados em alguma decis√£o. Substitua-os por casos com maior documenta√ß√£o p√∫blica.
        As decis√µes e laudos analisados devem ser atuais, com data de emiss√£o ou julgamento de no m√°ximo 5 anos.
        A finalidade √© identificar padr√µes t√©cnicos, erros recorrentes e boas pr√°ticas que contribuam para a elabora√ß√£o de laudos mais robustos e alinhados com as exig√™ncias dos Tribunais.
        """,
        description="Agente que busca informa√ß√µes no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}"
    lancamentos = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos

################################################
# --- Agente 2: Planejador de Laudos Periciais --- #
################################################
def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um planejador de laudos periciais, um perito especialista em periciais e normas relacionadas. Com base na lista de laudos mais recentes e relevantes buscador, voc√™ deve:
        usar a ferramenta de busca do Google (google_search) para criar um plano elaborado para o laudo.
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais informa√ß√µes sobre o tema e aprofundar.
        Diga quem pediu o laudo (o juiz ou a parte interessada) e por que ele est√° sendo feito.
        Descreva o im√≥vel (tamanho do lote, √°rea constru√≠da se assim possuir, o que tem l√°, se tiver uma constru√ß√£o como est√° o estado da constru√ß√£o).
        Use um m√©todo t√©cnico (como por exemplo o comparativo ou evolutivo) para calcular quanto o im√≥vel vale.
        Ao final, voc√™ ir√° escolher qual forma mais relevante de se fazer o laudo, com base nas suas pesquisas
        e retornar com o resultado, tendo seus pontos mais relevantes e um plano com os assuntos a serem investigados.
        """,
        description="Agente que planeja pericia",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"T√≥pico:{topico}\nLan√ßamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_laudo = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_laudo

######################################
# --- Agente 3: Redator do Laudo --- #
######################################
def agente_redator(topico, plano_de_pericia):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um Perito Avaliador especialista em engenharia civil e avalia√ß√µes t√©cnicas.
            Sua fun√ß√£o √© elaborar pareceres periciais, avalia√ß√µes imobili√°rias e laudos t√©cnicos fundamentados em normas t√©cnicas e legisla√ß√£o vigente.
            Utilize o tema fornecido no plano de pericia e os pontos t√©cnicos mais relevantes para construir um rascunho de relat√≥rio ou laudo claro, preciso e fundamentado.
            O conte√∫do deve ser t√©cnico, objetivo e embasado, evitando linguagem excessivamente complexa, mas preservando rigor cient√≠fico e normativo.
            """,
        description="Agente redator de laudos periciais"
    )
    entrada_do_agente_redator = f"T√≥pico: {topico}\nPlano de pericia: {plano_de_pericia}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um Editor e Revisor T√©cnico meticuloso, especializado em documentos e laudos periciais na √°rea de engenharia civil.
            Considere o p√∫blico t√©cnico e jur√≠dico ao revisar, garantindo clareza, precis√£o, concis√£o e adequa√ß√£o ao padr√£o normativo e legal vigente.
            Revise o rascunho do laudo ou parecer abaixo sobre o tema indicado, verificando coer√™ncia t√©cnica, corre√ß√£o terminol√≥gica, clareza e formalidade.
            Caso o documento esteja adequado, responda apenas: ‚ÄúO laudo est√° tecnicamente consistente e pronto para emiss√£o.‚Äù
            Se houver inconsist√™ncias ou pontos a melhorar, identifique-os e sugira corre√ß√µes t√©cnicas e formais.
            """,
        description="Agente revisor de laudos periciais."
    )
    entrada_do_agente_revisor = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Sistema de Cria√ß√£o de Laudos Periciais com 4 Agentes üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite o T√ìPICO sobre o qual voc√™ quer criar o laudo pericial: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not topico:
    print("Voc√™ n√£o digitou um t√≥pico. Por favor, tente novamente.")
else:
    print(f"Maravilha! Vamos ent√£o criar um laudo pericial sobre o t√≥pico: {topico}")

    lancamentos_buscados = agente_buscador(topico, data_de_hoje)
    print("\n--- üìù Resultado do Agente 1 (Buscador) ---\n")
    display(to_markdown(lancamentos_buscados))
    print("---------------------------------------------------------------------")

    plano_de_laudo = agente_planejador(topico, lancamentos_buscados)
    print("\n--- üìù Resultado do Agente 2 (Planejador) ---\n")
    display(to_markdown(plano_de_laudo))
    print("---------------------------------------------------------------------")

    rascunho_de_laudo = agente_redator(topico, plano_de_laudo)
    print("\n--- üìù Resultado do Agente 3 (Redator) ---\n")
    display(to_markdown(rascunho_de_laudo))
    print("---------------------------------------------------------------------")

    laudo_revisado = agente_revisor(topico, rascunho_de_laudo)
    print("\n--- üìù Resultado do Agente 4 (Revisor) ---\n")
    display(to_markdown(laudo_revisado))
    print("---------------------------------------------------------------------")

